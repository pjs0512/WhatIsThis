import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import ReactDOM from 'react-dom';
import marked from 'marked';
import prism from 'prismjs';

import Canvas from './canvas';
import './prism.css';
import './style.css';

var Markdown = function (_React$Component) {
  _inherits(Markdown, _React$Component);

  function Markdown(props) {
    _classCallCheck(this, Markdown);

    var _this = _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, props));

    _this.components = new Map();

    _this.renderer = new marked.Renderer();
    _this.renderer.table = function (header, body) {
      return '<table class="grid"><thead>' + header + '</thead><tbody>' + body + '</tbody></table>';
    };
    return _this;
  }

  _createClass(Markdown, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderDOM();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.renderDOM();
    }
  }, {
    key: 'renderDOM',
    value: function renderDOM() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var id = _ref2[0];
          var component = _ref2[1];

          var div = document.getElementById(id);
          if (div instanceof HTMLElement) {
            ReactDOM.render(component, div);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      prism.highlightAll();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var document = this.document && this.document(localStorage.getItem('ACE_LANGUAGE') || 'zh-CN');

      var _props = this.props,
          classes = _props.classes,
          theme = _props.theme,
          otherProps = _objectWithoutProperties(_props, ['classes', 'theme']);

      if (typeof document === 'string') {
        this.components.clear();
        var _theme = this.getTheme && this.getTheme();
        var html = marked(document.replace(/:::\s?demo\s?([^]+?):::/g, function (match, p1, offset) {
          var id = offset.toString(36);
          _this2.components.set(id, React.createElement(Canvas, Object.assign({
            name: _this2.constructor.name.toLowerCase(),
            theme: _theme
          }, otherProps), p1));
          return '<div id=' + id + '></div>';
        }), { renderer: this.renderer });

        return React.createElement('div', { className: 'markdown-only ' + _theme, dangerouslySetInnerHTML: {
            __html: html
          } });
      } else {
        return React.createElement('span', null);
      }
    }
  }]);

  return Markdown;
}(React.Component);

export default Markdown;