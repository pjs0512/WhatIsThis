import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import PropTypes from 'prop-types';
import CodeMirror from 'codemirror';

import 'codemirror/mode/jsx/jsx';
import 'codemirror/keymap/sublime';
import 'codemirror/addon/comment/comment';
import 'codemirror/lib/codemirror.css';
import './light.css';
import './dark.css';

var Editor = function (_React$Component) {
  _inherits(Editor, _React$Component);

  function Editor() {
    _classCallCheck(this, Editor);

    return _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).apply(this, arguments));
  }

  _createClass(Editor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var _props = this.props,
          onChange = _props.onChange,
          value = _props.value,
          mode = _props.mode,
          theme = _props.theme,
          lineNumbers = _props.lineNumbers,
          dragDrop = _props.dragDrop;


      this.cm = CodeMirror(this.editor, {
        mode: mode,
        theme: theme || 'light',
        keyMap: 'sublime',
        viewportMargin: Infinity,
        lineNumbers: lineNumbers,
        dragDrop: dragDrop
      });

      this.cm.setValue(value);

      this.cm.on('changes', function (cm) {
        if (onChange) {
          clearTimeout(_this2.timeout);

          _this2.timeout = setTimeout(function () {
            onChange(cm.getValue());
          }, 300);
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      for (var key in nextProps) {
        if (nextProps.hasOwnProperty(key)) {
          var prop = nextProps[key];
          if (prop !== this.props[key]) {
            this.cm.setOption(key, prop);
          }
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement('div', { className: 'editor', ref: function ref(div) {
          return _this3.editor = div;
        } });
    }
  }]);

  return Editor;
}(React.Component);

Editor.propTypes = {
  theme: PropTypes.string,
  mode: PropTypes.string,
  lineNumbers: PropTypes.bool,
  dragDrop: PropTypes.bool,
  value: PropTypes.string,
  onChange: PropTypes.func
};

Editor.defaultProps = {
  mode: 'jsx',
  theme: 'light',
  lineNumbers: false,
  dragDrop: false
};

export default Editor;