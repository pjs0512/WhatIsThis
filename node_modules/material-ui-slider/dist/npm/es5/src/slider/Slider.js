import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import PropTypes from 'prop-types';
import _ from 'lodash';
import debounce from 'lodash/debounce';
import { withStyles } from '@material-ui/core/styles';
import { Component } from '../../libs';
import { calculateChange } from "../helpers/slider";

var styles = function styles(theme) {
  return {
    warp: {
      position: 'absolute',
      top: 0, right: 0, bottom: 0, left: 0
    },
    trackContainer: {
      width: '100%',
      height: '100%'
    },
    track: {
      position: 'absolute',
      transition: 'margin 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, width 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, height 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, left 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, right 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, top 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, bottom 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms'
    },
    pointer: {
      marginTop: 1,
      width: 12,
      height: 12,
      backgroundClip: 'padding-box',
      border: '0px solid transparent',
      borderRadius: '50%',
      boxSizing: 'border-box',
      position: 'absolute',
      cursor: 'pointer',
      pointerEvents: 'inherit',
      transform: 'translate(-50%, -50%)',
      transition: 'background 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, border-color 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, width 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, height 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, left 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, right 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, top 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, bottom 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
      overflow: 'visible',
      outline: 'none',
      zIndex: 1
    },
    pointerRight: {
      transform: 'translate(50%, -50%)'
    },
    pointerVertical: {
      marginLeft: 1,
      transform: 'translate(-50%, 50%)'
    },
    pointerVerticalTop: {
      transform: 'translate(-50%, -50%)'
    },
    pointerOver: {
      '&:before': {
        content: '""',
        display: 'block',
        border: '0 solid ' + theme.palette.action.hover,
        position: 'absolute',
        overflow: 'hidden',
        borderRadius: 'inherit',
        boxSizing: 'border-box',
        pointerEvents: 'none',
        transition: 'border 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, width 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, height 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, top 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, top 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, bottom 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
        zIndex: -1
      }
    },
    pointerHover: {
      '&:before': {
        width: 36,
        height: 36,
        borderWidth: 12,
        left: -12,
        top: -12
      }
    },
    pointerPressed: {
      '&:before': {
        width: 48,
        height: 48,
        borderWidth: 18,
        borderColor: theme.palette.action.selected,
        left: -18,
        top: -18
      }
    },
    pointerDisabled: {
      width: 8,
      height: 8
    },
    scale: {
      position: 'absolute'
    }
  };
};

var Slider = function (_Component) {
  _inherits(Slider, _Component);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _initialiseProps.call(_this);

    var min = props.min,
        max = props.max,
        defaultValue = props.defaultValue,
        value = props.value;

    _this.min = Math.min(min, max);
    _this.max = Math.max(min, max);

    _this.state = {
      value: _this.calcDefaultValue(value || defaultValue),
      hover: false,
      pressed: false
    };

    _this.debounce = debounce(function (fn, data, event) {
      fn(data, event);
    }, 100);
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unbindEventListeners();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!_.isUndefined(nextProps.value) && !_.isEqual(nextProps.value, this.props.value)) {
        this.setState({
          value: this.calcDefaultValue(nextProps.value)
        });
      }
    }
  }, {
    key: 'unbindEventListeners',
    value: function unbindEventListeners() {
      window.removeEventListener('mousemove', this.handleChange);
      window.removeEventListener('mouseup', this.handleMouseUp);
      window.removeEventListener('touchend', this.handleMouseUp);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          classes = _props.classes,
          theme = _props.theme,
          range = _props.range,
          scaleLength = _props.scaleLength,
          direction = _props.direction,
          color = _props.color,
          disabled = _props.disabled;
      var _state = this.state,
          value = _state.value,
          hover = _state.hover,
          pressed = _state.pressed;
      var min = this.min,
          max = this.max;

      var trackColor = disabled ? theme.palette.grey[700] : color || theme.palette.primary[theme.palette.type];
      var vertical = direction === 'vertical';
      var rootStyle = Object.assign({
        position: 'relative',
        width: '100%',
        height: 48,
        display: 'inline-block'
      }, vertical && {
        width: 48,
        height: '100%'
      });
      var containerStyle = Object.assign({
        position: 'absolute',
        top: 23,
        left: 0,
        width: '100%',
        height: 2
      }, vertical && {
        top: 0,
        left: 23,
        height: '100%',
        width: 2
      });

      var trackEl = void 0;
      var thumbEl = void 0;
      if (range) {
        var offsetLeft = Math.round((value[0] - min) / (max - min) * 100);
        var offsetRight = 100 - Math.round((value[1] - min) / (max - min) * 100);

        var trackActiveStyle = Object.assign({
          backgroundColor: trackColor
        }, vertical ? {
          width: '100%',
          bottom: offsetLeft + '%',
          top: offsetRight + '%',
          marginTop: disabled ? 6 : 0,
          marginBottom: disabled ? 6 : 0
        } : {
          height: '100%',
          left: offsetLeft + '%',
          right: offsetRight + '%',
          marginRight: disabled ? 6 : 0,
          marginLeft: disabled ? 6 : 0
        });

        var trackLeftStyle = Object.assign({
          backgroundColor: trackColor,
          opacity: '.38'
        }, vertical ? {
          width: '100%',
          height: disabled ? 'calc(' + offsetLeft + '% - 6px)' : 'calc(' + offsetLeft + '%)',
          marginTop: disabled ? 6 : 0,
          bottom: 0
        } : {
          height: '100%',
          width: disabled ? 'calc(' + offsetLeft + '% - 6px)' : 'calc(' + offsetLeft + '%)',
          marginRight: disabled ? 6 : 0,
          left: 0
        });

        var trackRightStyle = Object.assign({
          backgroundColor: trackColor,
          opacity: '.38'
        }, vertical ? {
          width: '100%',
          height: disabled ? 'calc(' + offsetRight + '% - 6px)' : 'calc(' + offsetRight + '%)',
          marginBottom: disabled ? 6 : 0,
          top: 0
        } : {
          height: '100%',
          width: disabled ? 'calc(' + offsetRight + '% - 6px)' : 'calc(' + offsetRight + '%)',
          marginLeft: disabled ? 6 : 0,
          right: 0
        });

        var thumbLeftStyle = Object.assign({
          backgroundColor: trackColor
        }, vertical ? {
          left: 0,
          bottom: offsetLeft + '%'
        } : {
          top: 0,
          left: offsetLeft + '%'
        });

        var thumbLeftClass = this.classNames(classes.pointer, disabled && classes.pointerDisabled, vertical && classes.pointerVertical, this.activePointer === 'left' && !disabled && (hover || pressed) && classes.pointerOver, this.activePointer === 'left' && !disabled && hover && classes.pointerHover, this.activePointer === 'left' && !disabled && pressed && classes.pointerPressed);

        var thumbRightStyle = Object.assign({
          backgroundColor: trackColor
        }, vertical ? {
          left: 0,
          top: offsetRight + '%'
        } : {
          top: 0,
          right: offsetRight + '%'
        });

        var thumbRightClass = this.classNames(classes.pointer, classes.pointerRight, disabled && classes.pointerDisabled, vertical && classes.pointerVertical, vertical && classes.pointerVerticalTop, this.activePointer === 'right' && !disabled && (hover || pressed) && classes.pointerOver, this.activePointer === 'right' && !disabled && hover && classes.pointerHover, this.activePointer === 'right' && !disabled && pressed && classes.pointerPressed);

        trackEl = React.createElement(
          'div',
          null,
          React.createElement('div', { className: classes.track, style: trackLeftStyle }),
          React.createElement('div', { className: classes.track, style: trackActiveStyle }),
          React.createElement('div', { className: classes.track, style: trackRightStyle })
        );
        thumbEl = React.createElement(
          'div',
          null,
          React.createElement('div', { className: thumbLeftClass,
            style: thumbLeftStyle,
            onMouseOver: function onMouseOver() {
              _this2.activePointer = 'left';
            },
            onTouchStart: function onTouchStart() {
              _this2.activePointer = 'left';
            } }),
          React.createElement('div', { className: thumbRightClass,
            style: thumbRightStyle,
            onMouseOver: function onMouseOver() {
              _this2.activePointer = 'right';
            },
            onTouchStart: function onTouchStart() {
              _this2.activePointer = 'right';
            } })
        );
      } else {
        var offset = Math.round((value - min) / (max - min) * 100);
        var _trackActiveStyle = Object.assign({
          backgroundColor: trackColor
        }, vertical ? {
          width: '100%',
          height: disabled ? 'calc(' + offset + '% - 6px)' : 'calc(' + offset + '%)',
          marginTop: disabled ? 6 : 0,
          bottom: 0
        } : {
          height: '100%',
          width: disabled ? 'calc(' + offset + '% - 6px)' : 'calc(' + offset + '%)',
          marginRight: disabled ? 6 : 0,
          left: 0
        });

        var trackStyle = Object.assign({
          backgroundColor: trackColor,
          opacity: '.38'
        }, vertical ? {
          width: '100%',
          height: disabled ? 'calc(' + (100 - offset) + '% - 6px)' : 'calc(' + (100 - offset) + '%)',
          marginBottom: disabled ? 6 : 0,
          top: 0
        } : {
          height: '100%',
          width: disabled ? 'calc(' + (100 - offset) + '% - 6px)' : 'calc(' + (100 - offset) + '%)',
          marginLeft: disabled ? 6 : 0,
          right: 0
        });

        var thumbStyle = Object.assign({
          backgroundColor: trackColor
        }, vertical ? {
          left: 0,
          bottom: offset + '%'
        } : {
          top: 0,
          left: offset + '%'
        });

        var thumbClass = this.classNames(classes.pointer, disabled && classes.pointerDisabled, vertical && classes.pointerVertical, !disabled && (hover || pressed) && classes.pointerOver, !disabled && hover && classes.pointerHover, pressed && classes.pointerPressed);

        trackEl = React.createElement(
          'div',
          null,
          React.createElement('div', { className: classes.track, style: _trackActiveStyle }),
          React.createElement('div', { className: classes.track, style: trackStyle })
        );
        thumbEl = React.createElement('div', { className: thumbClass, style: thumbStyle });
      }

      var scaleEl = void 0;
      if (scaleLength > 0 && scaleLength < max - min) {
        var scaleCount = Math.floor((max - min) / scaleLength);
        var scaleArray = Array.from(new Array(scaleCount + ((max - min) % scaleLength === 0 ? 1 : 2)), function (val, index) {
          return index;
        });
        scaleEl = React.createElement(
          'div',
          null,
          scaleArray.map(function (i) {
            var scaleValue = scaleLength * i + min;
            var scaleOffset = 0;
            if (i === scaleArray.length - 1) {
              scaleOffset = 100;
            } else if (i > 0) {
              scaleOffset = (1 - (max - min) % scaleLength / (max - min)) * 100 / scaleCount * i;
            }
            var scaleStyle = Object.assign({
              backgroundColor: trackColor
            }, vertical ? {
              width: '100%',
              height: 2,
              left: 0,
              bottom: scaleOffset + '%'
            } : {
              height: '100%',
              width: 2,
              top: 0,
              left: scaleOffset + '%'
            });
            if (range && scaleValue > value[0] && scaleValue < value[1] || !range && scaleValue < value) {
              Object.assign(scaleStyle, {
                backgroundColor: 'rgba(255,255,255,.38)'
              });
            }
            return React.createElement('span', { key: i, className: classes.scale, style: scaleStyle });
          })
        );
      }

      return React.createElement(
        'div',
        { className: this.className('slider'), style: this.style(rootStyle) },
        React.createElement(
          'div',
          { className: classes.warp,
            ref: function ref(container) {
              return _this2.container = container;
            },
            onMouseOver: this.handleMouseOver,
            onMouseOut: this.handleMouseOut,
            onMouseDown: this.handleMouseDown,
            onTouchMove: this.handleChange,
            onTouchStart: this.handleTouchStart },
          React.createElement(
            'div',
            { style: containerStyle },
            trackEl,
            scaleEl,
            thumbEl
          )
        )
      );
    }
  }]);

  return Slider;
}(Component);

Slider.defaultProps = {
  min: 0,
  max: 100,
  defaultValue: 0,
  range: false,
  scale: 0,
  direction: 'horizontal',
  onChange: function onChange() {},
  onChangeComplete: function onChangeComplete() {}
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.activePointer = 'left';

  this.calcDefaultValue = function (defaultValue) {
    var range = _this3.props.range;
    var min = _this3.min,
        max = _this3.max;

    if (range) {
      var value = !!_this3.state ? _this3.state.value : [min, max];
      if (_.isArray(defaultValue)) {
        var value1 = _.isNumber(defaultValue[0]) ? defaultValue[0] : min;
        var value2 = _.isNumber(defaultValue[1]) ? defaultValue[1] : max;
        var valueMin = Math.min(value1, value2);
        var valueMax = Math.max(value1, value2);
        value[0] = _this3.calcScaleValue(valueMin >= min && valueMin <= max ? valueMin : min);
        value[1] = _this3.calcScaleValue(valueMax >= min && valueMax <= max ? valueMax : max);
      } else if (_.isNumber(defaultValue)) {
        var _valueMin = _this3.calcScaleValue(defaultValue);
        if (_valueMin <= value[1]) value[0] = _valueMin;else value[1] = _valueMin;
        console.log(_valueMin, value);
      }
      return value;
    } else {
      return _this3.calcScaleValue(_.isNumber(defaultValue) && defaultValue >= min && defaultValue <= max ? defaultValue : min);
    }
  };

  this.calcScaleValue = function (value) {
    var scaleLength = _this3.props.scaleLength;
    var min = _this3.min,
        max = _this3.max;

    if (scaleLength > 0) {
      value -= min;
      var halfScaleLength = scaleLength / 2;
      if ((max - min) % scaleLength > 0 && value / scaleLength > Math.floor((max - min) / scaleLength)) {
        halfScaleLength = (max - min) % scaleLength / 2;
      }
      if (value % scaleLength > halfScaleLength) {
        var upValue = min + Math.ceil(value / scaleLength) * scaleLength;
        return upValue > max ? max : upValue;
      } else {
        return min + Math.floor(value / scaleLength) * scaleLength;
      }
    } else return value;
  };

  this.triggerChange = function (event) {
    _this3.props.onChangeComplete && _this3.debounce(_this3.props.onChangeComplete, _this3.state.value, event);
    _this3.props.onChange && _this3.props.onChange(_this3.state.value, event);
  };

  this.handleChange = function (e, skip) {
    var _props2 = _this3.props,
        range = _props2.range,
        disabled = _props2.disabled;
    var min = _this3.min,
        max = _this3.max;

    if (disabled) return;

    var offset = calculateChange(e, skip, _this3.props, _this3.container);
    var oldValue = _this3.state.value;
    var newValue = _this3.calcScaleValue(Math.round(offset / 100 * (max - min)) + min);
    if (range) {
      if (_this3.activePointer === 'left' && oldValue[0] !== newValue && newValue < oldValue[1] || newValue <= oldValue[0]) {
        _this3.activePointer === 'right' && (_this3.activePointer = 'left');
        _this3.setState({
          value: [newValue, oldValue[1]]
        }, function () {
          _this3.triggerChange(e);
        });
      } else if (_this3.activePointer === 'right' && oldValue[1] !== newValue && newValue > oldValue[0] || newValue >= oldValue[1]) {
        _this3.activePointer === 'left' && (_this3.activePointer = 'right');
        _this3.setState({
          value: [oldValue[0], newValue]
        }, function () {
          _this3.triggerChange(e);
        });
      }
    } else {
      if (oldValue !== newValue) {
        _this3.setState({
          value: newValue
        }, function () {
          _this3.triggerChange(e);
        });
      }
    }
  };

  this.handleMouseOver = function () {
    _this3.setState({
      hover: true
    });
  };

  this.handleMouseOut = function () {
    _this3.setState({
      hover: false
    });
  };

  this.handleTouchStart = function (e, skip) {
    _this3.setState({
      pressed: true
    });
    _this3.handleChange(e, skip);
    window.addEventListener('touchend', _this3.handleMouseUp);
  };

  this.handleMouseDown = function (e) {
    _this3.setState({
      pressed: true
    });
    _this3.handleChange(e, true);
    window.addEventListener('mousemove', _this3.handleChange);
    window.addEventListener('mouseup', _this3.handleMouseUp);
  };

  this.handleMouseUp = function () {
    _this3.setState({
      pressed: false
    });
    _this3.unbindEventListeners();
  };
};

Slider.propTypes = {
  min: PropTypes.number,
  max: PropTypes.number,
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),
  range: PropTypes.bool,
  scaleLength: PropTypes.number,
  direction: PropTypes.oneOf(['horizontal', 'vertical']),
  color: PropTypes.string,
  disabled: PropTypes.bool,
  onChange: PropTypes.func,
  onChangeComplete: PropTypes.func
};

export default withStyles(styles, { withTheme: true })(Slider);